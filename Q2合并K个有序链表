/*
给你一个链表数组，每个链表都已经按升序排列。

请你将所有链表合并到一个升序链表中，返回合并后的链表。
输入：lists = [[1,4,5],[1,3,4],[2,6]]
输出：[1,1,2,3,4,4,5,6]
解释：链表数组如下：
[
  1->4->5,
  1->3->4,
  2->6
]
将它们合并到一个有序链表中得到。
1->1->2->3->4->4->5->6

来源：力扣（LeetCode）
链接：https://leetcode.cn/problems/merge-k-sorted-lists
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

/*
思路：首先考虑如何合并两个有序链表：设置两个指针i和j，分别指向要被合并的两个链表L1和L2，然后设置一个变量head作为最后结果的头部，并设置一个指针tail来执行。每次比较i和j所指代
的节点的大小，将较小的值插入tail的next，然后那个链表后移，直到某个链表结束，将另一个链表补完。
接着考虑多个链表的合并，可以简单地直接循环，也可以用分治法加快效率。
*/
class Solution {
public:

    ListNode* mergeTwoLists(ListNode* a,ListNode* b){
        ListNode head;
        ListNode *tail = &head,*i = a,*j = b;
        while (i && j){
            if (i->val < j->val){
                tail->next = i;
                i = i->next;
            }
            else{
                tail->next = j;
                j = j->next;
            }
            tail = tail->next;
        }
        if (i != NULL)  tail->next = i;
        else tail->next = j;
        return head.next;
    }

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        ListNode* ans = nullptr;
        for (int i = 0;i < lists.size();i++){
           ans = mergeTwoLists(ans,lists[i]);
        }
        return ans;
    }
};
